" Michael Oiknine

let g:go_bin_path="D:/mikeo/gocode/bin"                 " Path to $GOBIN -> bin folder of $GOPATH

" PLUGINS {{
" Specify directory for plugins - ~/.vim/plugged
" Using vim-plug -> https://github.com/junegunn/vim-plug

call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'                                  " Color Theme - Gruvbox 
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle' }   " Show Directory folders in tree format
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }      " Plugin for making writing go easier
Plug 'itchyny/lightline.vim'                            " Color status bar at the bottom of vim
Plug 'scrooloose/syntastic'                             " Set syntax correction 
Plug 'townk/vim-autoclose'                              " Autoclose Brackets
Plug 'artur-shaik/vim-javacomplete2'                    " Autocomplete for Java
Plug 'ctrlpvim/ctrlp.vim'                               " Fuzzy Search 
Plug 'majutsushi/tagbar'                                " Displays tgas ordered by scope
Plug 'python-mode/python-mode', { 'branch': 'develop' } " Lots of fun Python stuff
call plug#end()
" }}


" Mappings {{
" *** Mappings for plugins are in plug in settings **** "
" Leader Map key - Precedes all following commands (without : before command)
let mapleader = ","
nmap <leader>ev :vsplit $MYVIMRC<CR> 
nmap <leader>et :tabnew $MYVIMRC<CR>
nmap <leader>r  :source $MYVIMRC<CR>
nmap <leader>nt :NERDTree<CR>
nmap <leader>tg :TagbarToggle<CR>
" }}


" Code Templates {{
autocmd BufNewFile *.cpp r ~/.vim/templates/cpp_template.cpp

" }}

" Spacing {{
set tabstop=4               " tabs = 4 spaces
set softtabstop=4           " tabs = 4 spaces when editing
set expandtab               " tabs are spaces
set backspace=indent,eol,start
" }}

" Visuals {{
set number                  " Shows line number
set relativenumber          " Show line number relative to current line
set title
set showcmd                 " show command in bottom bar
set wildmenu                " Pressing tab during commands brings up suggestions
set lazyredraw              " Redraw the screen only when necessary
set showmatch               " Highlight matching parenthesis
syntax on
let &t_SI = "\<Esc>[6 q"    " Edit cursor for Insert mode
let &t_SR = "\<Esc>[4 q"    " Edit cursor for Replace mode
let &t_EI = "\<Esc>[2 q"    " Edit cursor for Visual mode

filetype plugin indent on   " load file-specific indenting
" }}

" Searching {{ 
set incsearch               " Searches as characters are entered
set hlsearch                " Highlight search matches
set ignorecase              " Ignore case when searching
set smartcase               " Dont ignore case when typing Captital letters
" }}

" Folding {{
set foldmethod=syntax       " fold based on language syntax
set foldnestmax=10          " max depth of 10
set foldcolumn=3
set nofoldenable            " don't fold files by default
" }}

" Utility {{
set clipboard=unnamed       " Allow copying from outside VIM
" }}


" Plug-In Settings {{

" ========== majutsushi/tagbar ==========

" ========== python-mode =========
let g:pymode = 1                    " Turn plugin on
let g:pymode_python = 'python3'     " Set current python version
let g:pymode_trim_whitespaces = 1   " Trim unused whitespaces on save
"let g:pymode_options = 1
let g:pymode_indent = 1             " Enable python indentation
let g:pymode_warnings = 1           " Turn off super annoying warnings
let g:pymode_lint = 1               " Code Checking
let g:pymode_lint_on_fly = 0        " Check code while editing
let g:pymode_rope_completion = 1    " Turn on autocomplete
let g:pymode_rope_complete_on_dot=1 " Autocomplete turns on after period in Insert mode
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_builtin_objs = g:pymode_syntax_all
let g:pymode_lint_ignore = ["E501", "W", "E"]

" ========== itchyny/lightline ==========
set laststatus=2   
set noshowmode  
set t_Co=256

" Replace filename component of lightline statusline
let g:lightline = {
    \ 'component_function' : {
    \   'filename' : 'FilenameForLightline'
    \ }
    \ }
" Show full path of filename
function! FilenameForLightline()
        return expand('%')
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

" ========== Gruvbox/Vim ==========
colorscheme gruvbox
set background=dark
let g:gruvboc_number_column = 'bg3'
let g:gruvbox_termcolors = '256'
let g:gruvbox_italicize_comments = 1 " Enables italics for comments
let g:gruvbox_bold = 1              " Enable bold text
let g:gruvbox_italic = 1            " Enable italic text
let g:gruvbox_underline = 1         " Enable underlining



" ========== NERDTree ==========
" Files to ignore in NERDTree 
let NERDTreeIgnore=['\.class$', '\.pyc$']

" ========== vim-go ==========
autocmd FileType go nmap <leader>gb <Plug>(go-build)
autocmd FileType go nmap <leader>gr <Plug>(go-run)

" ========== scrooloose/Syntastic ==========
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1 
let g:syntastic_cpp_checkers = ['gcc', 'g++']
let g:syntactic_java_checker = ['javac']

" ========== artur-shaik/vim-javacomplete2 ==========
autocmd FileType java setlocal omnifunc=javacomplete#Complete
nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
imap <F4> <Plug>(JavaComplete-Imports-AddSmart
nmap <F5> <Plug>(JavaComplete-Imports-Add)
imap <F5> <Plug>(JavaComplete-Imports-Add)
nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
imap <F6> <Plug>(JavaComplete-Imports-AddMissing)
nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
imap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
" }}

